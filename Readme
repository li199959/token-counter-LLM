# 大模型 Token 计算器

一个用于估算不同大语言模型 Token 占用情况的轻量级后端服务与命令行工具。当前实现聚焦于演示如何组织模型元信息、分词器注册以及 Token 统计服务逻辑，所有依赖均基于 Python 标准库，便于在任何环境中直接运行。

---

## 🚀 快速开始

### 1. 准备运行环境
- 需要 Python 3.10 及以上版本（项目在 Python 3.12 下通过测试）。
- 依赖全部来自标准库，无需安装第三方包。

建议使用虚拟环境隔离运行环境：
```bash
python -m venv .venv
source .venv/bin/activate  # Windows 下使用 .venv\Scripts\activate
```

### 2. 运行自动化测试
项目附带了覆盖 CLI、服务层、HTTP 接口与分词器的单元/集成测试。顶层的 `tests/conftest.py` 会自动将仓库根目录加入 `sys.path`，因此只需在仓库根目录执行：
```bash
pytest
```

执行成功后会看到所有 9 个测试用例通过，确保核心逻辑可以正确运行。

---

## 🛠 使用说明

### 命令行工具
命令行入口位于 `app/__main__.py`，使用 `python -m app.__main__` 调用：

1. 查看支持的模型列表：
   ```bash
   python -m app.__main__ models
   ```
2. 统计文本 Token 数量：
   ```bash
   python -m app.__main__ count \
       --model gpt-4o-mini \
       --text "Hello world"
   ```
3. 从文件读取内容进行统计：
   ```bash
   python -m app.__main__ count \
       --model qwen-2-7b \
       --file ./sample.txt
   ```
4. 使用自定义模型注册表：
   ```bash
   python -m app.__main__ --registry ./custom_models.json models
   ```

命令返回的均为 JSON 结构，便于与其他工具或脚本集成。

### HTTP 服务
执行以下命令可启动一个提供简单前端页面与 REST API 的本地服务：
```bash
python -m app.__main__ serve --host 0.0.0.0 --port 8000
```

服务端公开的接口：
- `GET /` 或 `GET /index.html`：返回内嵌的演示页面，可直接在浏览器中粘贴文本并查看 Token 统计结果。
- `GET /models`：返回所有可用模型的元信息列表。
- `POST /tokenize`：根据请求体中的 `model` 和 `text` 字段计算 Token 统计信息。

请求示例：
```bash
curl -X POST http://127.0.0.1:8000/tokenize \
     -H "Content-Type: application/json" \
     -d '{"model": "deepseek-chat", "text": "你好，世界！"}'
```

返回示例（部分字段）：
```json
{
  "model": {
    "id": "deepseek-chat",
    "display_name": "DeepSeek-Chat",
    "max_context": 65536,
    ...
  },
  "token_count": 8,
  "usage_ratio": 0.000122,
  "pricing": {
    "currency": "USD",
    "input_per_1k": 0.14,
    "estimated_input_cost": 0.00112
  }
}
```

---

## 📁 目录结构
```
app/
├── __main__.py           # 命令行入口
├── server.py             # 内置 HTTP 服务（包含演示前端）
├── config.py             # 模型注册表解析逻辑
├── models.py             # 元数据 dataclass 定义
├── services/
│   └── token_service.py  # 业务服务层（核心计算逻辑）
├── tokenizers/
│   ├── base.py           # TokenizerAdapter 抽象基类
│   ├── registry.py       # 分词器注册表与工厂
│   ├── regex_tokenizer.py# 基于正则的分词器实现
│   └── simple_byte_tokenizer.py # UTF-8 字节级分词器
└── resources/
    └── model_registry.json # 预置的模型/分词器配置
```

---

## 🧠 核心实现原理

### 1. 模型注册与配置解析 (`app/config.py`)
- 默认读取 `app/resources/model_registry.json`，也可通过 CLI/服务端传入自定义路径。
- 每个模型配置包含 `id`、`display_name`、`family`、`provider`、`max_context`、`tokenizer`、`pricing` 等字段。
- `TokenizerSpec` 与 `Pricing` 使用 `dataclass` 封装，便于后续序列化与业务逻辑使用。

### 2. 分词器注册表 (`app/tokenizers/registry.py`)
- 提供 `TokenizerRegistry.get_tokenizer()` 工厂方法，根据 `TokenizerSpec` 构造具体分词器实例，并支持缓存复用。
- 当前内置两种分词器：
  - `RegexTokenizer`：可配置是否保留空白、大小写归一化、正则模式等，适用于模拟 BPE/词法分割。
  - `ByteTokenizer`：按 UTF-8 字节切分，适合模拟字节级上下文限制模型。
- 通过 `get_tokenizer_for_model(model, registry)` 快速根据模型元数据获取分词器。

### 3. 业务服务层 (`app/services/token_service.py`)
- `TokenService` 持有模型字典与 `TokenizerRegistry`。
- `calculate(model_id, text)` 会：
  1. 校验模型是否存在。
  2. 调用对应分词器获得 Token 序列。
  3. 统计 Token 数量、计算上下文使用比例与超限数量。
  4. 若配置了价格信息，估算输入 Token 成本。
- 返回结果统一为字典结构，包含模型详情、Token 列表、占用比例、费用估算等字段。

### 4. HTTP 层 (`app/server.py`)
- 使用标准库 `http.server` 实现，未引入第三方框架。
- 提供极简的单页前端（嵌入 HTML/CSS/JS）实现即时交互体验。
- 所有响应均为 UTF-8 编码，覆盖基本的错误处理（如未知模型、非法 JSON 等）。

### 5. 命令行入口 (`app/__main__.py`)
- 基于 `argparse`，提供 `models`、`count`、`serve` 三个子命令。
- 支持通过 `--registry` 切换模型配置文件，实现多套模型列表共存。

---

## 🔧 扩展指南

1. **新增模型**
   - 在 `app/resources/model_registry.json` 中添加一条模型记录。
   - 指定 `tokenizer.type` 为 `regex` 或 `byte`，并根据需要填写 `options`（例如自定义正则、是否保留空白等）。
   - 可选地添加 `pricing` 字段用于费用估算。

2. **新增分词器实现**
   - 在 `app/tokenizers/` 目录中新建模块，实现 `TokenizerAdapter` 抽象类。
   - 在 `TokenizerRegistry._create_tokenizer` 中注册新的 `type` 分支。
   - 在模型配置中引用新的 `type` 即可生效。

3. **接入真实分词库**
   - 可在分词器实现中引入第三方库（如 `tiktoken`、`tokenizers` 或 `sentencepiece`），并在 README 的“运行环境”小节中补充安装指引。
   - 若需要异步处理或批量计算，可将 `TokenService` 封装在 FastAPI、Flask 等框架中拓展。

---

## 🧪 开发建议
- 修改或新增功能后，请运行 `pytest` 确认所有测试通过。
- 若调整模型配置，推荐补充对应的单元测试以覆盖新场景。
- 可结合 `python -m app.__main__ count --model ... --text ...` 进行快速手动验证。

---

## 📄 许可证
项目未附带特定开源许可证，可按需在内部或个人项目中学习、扩展。
